#!/bin/bash

# Author: Dat T Nguyen <n.dat@outlook.com>
# Date: 06 April 2022

# This script is a user friendly pipeline to use to run tag SNP selection with LmTag


syntax=" ./LmTag_pipeline.sh 
    \n\n\t
    -v|--vcf : input vcf file to build  (should be in bgzip formatted file, and preprocessed by our recommended protocol: bcftools view YOUR.vcf.gz -m2 -M2 -v snps -Q 0.9999999999:major -q 0.01:minor -e 'ALT="."' | bcftools +fill-tags | sed 's/chr//g' | bgzip > YOUR_processed.vcf.gz)
    \n\n\t
    -m|--model : path to buit model generated by [model_pipeline.sh].
    \n\n\t
    -M|--model_setting : model setting can be [linear] that model the relationship of LD, MAF and distance as a simple linear model or [interaction] that consider interaction term of LD and MAF_taggedSNP. In our experiment, interaction model provides slightly better performance than simple linear model. However, we still prefer the simpler model as the performance difference is not significant.
    \n\n\t
    -s|--score : [optional] file provide infomation of effect score of input SNPs in the targeted chromosome. In practice, we use CADD scores for this option.
    \n\n\t
    -V|--vip : [optional] list of SNPs that will be try to prioritize to select by the algorithm - genome-wide SNP list accepted. In practice, we used a combination of ClinVar and GWAS Catalog for this option.
    \n\n\t
    -o|--out : [optional] output tagSNPs selected by LmTag algorithm, defaut: LmTag_tagSNP.txt.
    \n\n\t
    -k|--beam : [optional] beamwith - defaut: 1.
    \n
"

while [[ $# -gt 1 ]]
do
key="$1"

case $key in

     -v|--vcf) 
     in_vcf=$(readlink -f $2)
     shift
     ;; 

     -m|--model) 
     model_path=$(readlink -f $2)
     shift
     ;; 
 
     -M|--model_setting) 
     model_setting=$2
     shift
     ;; 

     -s|--score) 
     eff_path=$(readlink -f $2)
     shift
     ;; 

     -V|--vip) 
     vip_path=$(readlink -f $2)
     shift
     ;; 

     -o|--out)
     out_fn=$2
     shift
     ;;

     -k|--beam) 
     beam=$2
     shift
     ;;
     *)

esac
shift
done

if [[ -z "$in_vcf" ]]; then
   echo ""
   echo "Usage:"
   echo -e $syntax
   echo ""
   echo "ERROR: no input vcf file !"
   echo ""
   exit
fi

if [[ -z "$model_path" ]]; then
   echo ""
   echo "Usage:"
   echo -e $syntax
   echo ""
   echo "ERROR: no input model file!"
   echo ""
   exit
fi

if [[ -z "$model_setting" ]]; then
   echo ""
   echo "Usage:"
   echo -e $syntax
   echo ""
   echo "ERROR: no input model setting! model setting accepts [-M|--model_setting linear] or [-M|--model_setting interaction] only"
   echo ""
   exit
fi

if [[ -z "$out_fn" ]]; then
   out_fn="LmTag_model.Rdata"
   echo "No specific setting for output name, so use the default setting (--out LmTag_tagSNP.txt)..."
fi

if [[ -z "$beam" ]]; then
   beam=1
   echo "No specific setting for beamwith (k), so use the default setting (--beam 1)..."
fi


start_time=$SECONDS

echo "Computing LD ..."

tem_dir=${out_fn}_LmTag_tem
mkdir ${tem_dir}
# compute LD
#mkdir plink
plink --vcf ${in_vcf} \
      --vcf-half-call 'haploid' \
      --make-bed  --const-fid --out ${tem_dir}/tem_plink \
      --threads 1 \
      --memory 2000


plink --bfile ${tem_dir}/tem_plink \
      --r --ld-window-r2 0.2 \
      --ld-window 10000 \
      --ld-window-kb 1000 \
      --out ${tem_dir}/LD_0.2 \
      --threads 8 \
      --memory 2000

rm ${tem_dir}/tem_plink*

# LD file should be: ${tem_dir}/LD_0.2.ld

echo "Extracting MAF ..."
# extract MAF
echo $'CHR\tPOS\tAF' > ${tem_dir}/extracted_AF.txt
bcftools query -f '%CHROM\t%POS\t%AF\n' ${in_vcf} >> ${tem_dir}/extracted_AF.txt

echo "Fitting model..."
echo "Model setting is: $model_setting"

fit_imputation_model.R model_Rdata=${model_path} model=${model_setting} af=${tem_dir}/extracted_AF.txt ld=${tem_dir}/LD_0.2.ld ld_cutoff=0.8 out_ld=${tem_dir}/ld_fitted_model.txt

echo "Running tag SNP selection with LmTag..."

LmTag tag --ld_model ${tem_dir}/ld_fitted_model.txt \
      --eff ${eff_path} \
      --vip ${vip_path} \
      -k ${beam} \
      -o ${out_fn}

echo "Done LmTag pipline!"

elapsed=$(( SECONDS - start_time ))
eval "echo Running time: $(date -ud "@$elapsed" +'$((%s/3600/24)) days %H hr %M min %S sec')" > ${out_fn}.time.log
echo Running time: $(date -ud "@$elapsed" +'$((%s/3600/24)) days %H hr %M min %S sec')

rm -r ${tem_dir}